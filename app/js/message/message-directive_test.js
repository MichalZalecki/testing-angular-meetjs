// Generated by CoffeeScript 1.9.0
(function() {
  'use strict';
  describe('message directive', function() {
    var $compile, element, isolateScope, scope;
    element = scope = isolateScope = $compile = null;
    beforeEach(module('message.message-directive'));
    beforeEach(inject(function($rootScope) {
      scope = $rootScope.$new();
      scope.style = 'success';
      return scope.text = 'Hello, World!';
    }));
    describe('with index and fn', function() {
      beforeEach(inject(function(_$compile_) {
        $compile = _$compile_;
        scope.fn = function(id) {};
        spyOn(scope, 'fn');
        element = '<message style="{{ style }}" index="123" fn="fn(index)">{{ text }}</message>';
        element = $compile(element)(scope);
        return scope.$digest();
      }));
      it('should have .alert.alert-success and .close', function() {
        expect(element.find('.alert.alert-success').length).toEqual(1);
        return expect(element.find('.close').length).toEqual(1);
      });
      it('should have message', function() {
        return expect(element.text()).toContain('Hello, World!');
      });
      return it('should call fn on close', function() {
        expect(scope.fn).not.toHaveBeenCalled();
        element.find('.close').click();
        return expect(scope.fn).toHaveBeenCalledWith('123');
      });
    });
    return describe('without index and fn', function() {
      beforeEach(inject(function($compile) {
        element = '<message style="{{ style }}">{{ text }}</message>';
        element = $compile(element)(scope);
        scope.$digest();
        isolateScope = element.isolateScope();
        return spyOn(isolateScope, '$destroy');
      }));
      it('should have .alert.alert-success and .close', function() {
        expect(element.find('.alert.alert-success').length).toEqual(1);
        return expect(element.find('.close').length).toEqual(1);
      });
      it('should have message', function() {
        return expect(element.text()).toContain('Hello, World!');
      });
      it('should call scope.$destroy on close', function() {
        expect(isolateScope.$destroy).not.toHaveBeenCalled();
        element.find('.close').click();
        return expect(isolateScope.$destroy).toHaveBeenCalled();
      });
      return it('should call element.remove on close', function() {
        element = '<div><message style="{{ style }}">{{ text }}</message></div>';
        element = $compile(element)(scope);
        scope.$digest();
        element.find('.close').click();
        return expect(element.html()).toEqual('');
      });
    });
  });

}).call(this);
